# This is the backend application we are protecting with OpenID Connect
upstream my_backend {
    zone my_backend 64k;
    server 10.0.0.1:80;
}

# Custom log format to include the 'sub' claim in the REMOTE_USER field
log_format main_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" $status '
                    '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

# JavaScript code for OpenID Connect
js_include conf.d/openid_connect.js;
js_set $requestid_hash hashRequestId;
auth_jwt_claim_set $jwt_audience aud; # In case aud is an array

keyval_zone zone=opaque_sessions:1M state=conf.d/opaque_sessions.json timeout=1h; # CHANGE timeout to JWT/exp validity period
keyval_zone zone=refresh_tokens:1M  state=conf.d/refresh_tokens.json  timeout=8h; # CHANGE timeout to refresh validity period

keyval $cookie_auth_token $session_jwt zone=opaque_sessions;  # Exchange cookie for JWT
keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
keyval $request_id $new_session zone=opaque_sessions; # For initial session creation
keyval $request_id $new_refresh zone=refresh_tokens;  # "

map $refresh_token $no_refresh {
    "" 1;  # Before login
    "-" 1; # After logout
    default 0;
}

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# The frontend server - reverse proxy with OpenID Connect authentication
#
server {
    include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing

    # OpenID Connect Provider (IdP) configuration
    resolver 8.8.8.8; # For DNS lookup of IdP endpoints;
    subrequest_output_buffer_size 32k; # To fit a complete tokenset response

    set $oidc_jwt_keyfile "conf.d/idp_jwk.json"; # URL when using 'auth_jwt_key_request'
    set $oidc_logout_redirect "/_logout"; # Where to send browser after requesting /logout location
    set $oidc_authz_endpoint "https://federate.acmefinancial.net/f5-oauth2/v1/authorize";
    set $oidc_token_endpoint "https://10.10.1.28/f5-oauth2/v1/token";
    set $oidc_client "141890e7fd32a2a19a7a70f2f44506b8368c4ce3b6d1c85e";
    set $oidc_client_secret "57529b8b7f458a0e69d6621f0d90bcd9cf99f5ba314d06b8368c4ce3b6d1c85e";
    set $oidc_hmac_key "R9qFFG/m3XaLa+oAhVDP3tin"; # This should be unique for every NGINX instance/cluster

    listen 80; # Use SSL/TLS in production
    listen 443 ssl;

    ssl_certificate     /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;

    location = /favicon.ico {
        return 403;
    }
 
    location / {
        # This site is protected with OpenID Connect
        auth_jwt "" token=$session_jwt;
        auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
        #auth_jwt_key_request /_jwks_uri; # Enable when using URL

        # Absent/invalid OpenID Connect token will (re)start auth process (including refresh)
        error_page 401 = @oidc_auth;

        # Successfully authenticated users are proxied to the backend,
        ## Start add section ##
        proxy_set_header first $jwt_claim_firstName;
        proxy_set_header last $jwt_claim_lastName;
        proxy_set_header email $jwt_claim_eMail;
        proxy_set_header company $jwt_claim_company;
        ## Stop add section ##

        # with 'sub' claim passed as HTTP header
        proxy_set_header username $jwt_claim_sub;
        
        ## Start added for demo ##
        proxy_pass http://localhost:8080; # The backend site/app
        ## Stop added for demo ##

        access_log /var/log/nginx/access.log main_jwt;
    }
}
server {
    listen 8080;
    default_type  text/plain;
set $_response '$http_company is excited to Welcome $http_first $http_last to the organization
Look for more information in your e-mail address --> $http_email';

    return 200 $_response;
}