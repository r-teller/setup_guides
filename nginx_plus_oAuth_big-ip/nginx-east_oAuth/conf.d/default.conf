# Custom log format to include the 'sub' claim in the REMOTE_USER field
log_format main_jwt '$remote_addr - $jwt_claim_sub [$time_local]  - $jwt_claim_status - $jwt_claim_firstName -   "$request" $status '
                    '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';


upstream backend {
    zone backend 64k;
    server np-east-server;
    # server 10.10.1.120:9088;
}

# JavaScript code for OpenID Connect
js_include conf.d/openid_connect.js;
js_set $requestid_hash hashRequestId;
auth_jwt_claim_set $jwt_audience aud; # In case aud is an array

keyval_zone zone=opaque_sessions:1M state=/var/tmp/opaque_sessions.json timeout=1h sync; # CHANGE timeout to JWT/exp validity period
keyval_zone zone=refresh_tokens:1M  state=/var/tmp/refresh_tokens.json  timeout=8h sync; # CHANGE timeout to refresh validity period
keyval_zone zone=access_token:1M  state=/var/tmp/access_token.json  timeout=8h sync; # CHANGE timeout to refresh validity period

keyval $cookie_auth_token $session_jwt zone=opaque_sessions;  # Exchange cookie for JWT
keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
keyval $request_id $new_session zone=opaque_sessions; # For initial session creation
keyval $request_id $new_refresh zone=refresh_tokens;  # "
keyval $request_id $new_session zone=opaque_sessions; # For initial session creation
keyval $request_id $new_access zone=access_token;  # "

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

map $refresh_token $no_refresh {
    "" 1;  # Before login
    "-" 1; # After logout
    default 0;
}

map $host $domain {
    ~*.+\.(?<dom>.+)\.(?<tld>.+)  .$dom.$tld;
    ~*(?<dom>.+)\.(?<tld>.+)     .$dom.$tld;
    default            '';
}

server {
    listen 80;
    return 301 https://$host$request_uri;
}

server {
    include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing

    listen          443 ssl;
    ssl_certificate     /etc/nginx/certs/certificate.crt;
    ssl_certificate_key /etc/nginx/certs/privateKey.key;

    server_name     localhost;

    # OpenID Connect Provider (IdP) configuration
    resolver 8.8.8.8; # For DNS lookup of IdP endpoints;
    subrequest_output_buffer_size 32k; # To fit a complete tokenset response

    set $oidc_jwt_keyfile     /etc/nginx/conf.d/idp_jwk.json; # URL when using 'auth_jwt_key_request'
    set $oidc_logout_redirect "/"; # Where to send browser after requesting /logout location
    set $oidc_authz_endpoint  "https://oauth.acmefinancial.net/f5-oauth2/v1/authorize";
    set $oidc_token_endpoint  "https://oauth.acmefinancial.net/f5-oauth2/v1/token";
    set $oidc_client          "c554c097c2ebe3f820fc539898c806d42db510d9fe14aa5d";
    set $oidc_client_secret   "4b4ee4b587609d40ae7e86acfe8940648f99c8b622c006d42db510d9fe14aa5d";
    set $oidc_hmac_key        "ChangeMe"; # This should be unique for every NGINX instance/cluster

    location / {

        access_log /var/log/nginx/access.log main_jwt;

        proxy_set_header Host            $host;
        proxy_pass http://backend;
        auth_jwt off;

        # location ~ ^/(jobs|login) {
        #     auth_jwt "" token=$session_jwt;
        #     auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
        #
        #     error_page 401 = @oidc_auth;
        #     proxy_set_header Host $host;
        #     proxy_pass http://backend;
        # }
        location /jobs {
            auth_jwt "" token=$session_jwt;
            auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename

       # kill cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;

            error_page 401 = @oidc_auth;
            proxy_set_header Host $host;
            proxy_pass http://backend;
        }
        location /login {
            auth_jwt "" token=$session_jwt;
            auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename

            error_page 401 = @oidc_auth;
            proxy_set_header Host $host;
            proxy_pass http://backend;
        }
    }
}